<div class="row">
    <div class="loading-grey"></div>
    <div id="player_box" class="col-9">
        <div id="myCanvas" class="canvas">
            {% include 'recording/player/tagBoxes.html.twig' with {'tags': player.tags, 'show_tags': player.isShowTags} %}
            <div id="playerCursor" class="player-line"></div>
            <img class="player_img" src="{{ player.imageFilePath }}" id="cropbox"/>
        </div>
        <div class="row no-gutters mt-1">
            <div class="col-auto mr-auto form-inline">
                <button id="play" class="btn btn-link btn-sm" data-playing="false" role="switch" aria-checked="false">
                    <i class="fas fa-play"></i>
                </button>
                <div class="dropdown" id="play-dropdown">
                    <button id="dropdown" class="btn btn-link text-dark" style="padding: 0" data-playing="false" role="switch" aria-checked="false" data-toggle="dropdown">
                        <i class="fa-solid fa-caret-down" style="font-size: 12px"></i>
                    </button>
                    <div class="dropdown-menu" id="dropdown-menu-play" style="min-width: 30px">
                        <button id="continue-playback" class="btn btn-link {{ player.isContinuousPlay ? 'active':'' }}" title="Continue playback beyond current frame">
                            <i class="continue-playback"></i>
                        </button>
                    </div>
                </div>
                <div>
                    <button id="play_hidden" style="display: none"></button>
                    <button id="stop" class="btn btn-link">
                        <i class="fas fa-stop"></i>
                    </button>
                    <h8>
                        <span id="time_sec_div">{{ player.minTime > 0 ? player.minTime|round: 0 }}</span>
                        s
                    </h8>
                </div>
            </div>
            <div class="col-auto">
                <form class="form-inline" id="recordingForm" action="{{ baseUrl }}/recording/show/{{ player.recording.recording_id }}" method="post">
                    <input type="hidden" name="channel" value="{{ player.channel }}">
                    <input type="hidden" name="channel_num" value="{{ player.recording.channel_num }}">
                    <input type='hidden' name='showTags' value="{{ player.showTags }}">
                    <input type='hidden' name='estimateDistID' value="{{ player.estimateDistID }}">
                    <input type="hidden" name="collection_id" value="{{ player.recording.col_id }}" class="param-tm" id="collection_id">
                    <input type="hidden" name="recording_id" value="{{ player.recording.recording_id }}">
                    <input type="hidden" name="recording_name" value="{{ player.recording.name }}">
                    <input type="hidden" name="filename" value="{{ player.recording.filename }}" class="param-tm" id="filename">
                    <input type="hidden" name="recording_directory" value="{{ player.recording.directory }}" class="param-tm" id="recording_directory">
                    <input type="hidden" name="specWidth" value="{{ player.spectrogramWidth }}">
                    <input type="hidden" name="specHeight" value="{{ player.spectrogramHeight }}">
                    <input type="hidden" name="minTimeView" value="{{ player.minTime }}">
                    <input type="hidden" name="maxTimeView" value="{{ player.maxTime }}">
                    <input type="hidden" name="minFreqView" value="{{ player.minFrequency }}">
                    <input type="hidden" name="maxFreqView" value="{{ player.maxFrequency }}">
                    <input type="hidden" name="open" id="open" value="{{ open }}">
                    <input type="hidden" name="modalX" id="modalX" value="{{ modalX }}">
                    <input type="hidden" name="modalY" id="modalY" value="{{ modalY }}">
                    <input type="hidden" name="lat" id="lat" value="{{ player.recording.latitude_WGS84_dd_dddd }}">
                    <input type="hidden" name="lon" id="lon" value="{{ player.recording.longitude_WGS84_dd_dddd }}">
                    <input type="hidden" name="file_date" id="file_date" value="{{ player.recording.file_date }}">
                    {% include 'recording/player/timeBoxes.html.twig' with {
                        'minTime': player.minTime,
                        'maxTime': player.maxTime,
                        'minFrequency': player.minFrequency,
                        'maxFrequency': player.maxFrequency,
                    } only %}

                    <div class="btn-group dark-buttons" role="group">
                        <a href="#" id="exportCoordinates" class="btn btn-link" title="Export coordinates to clipboard">
                            <i class="fas fa-clipboard"></i>
                        </a>
                        <button id="zoom-submit" class="btn btn-link" type="button" title="Zoom" disabled>
                            <i class="fas fa-search-plus"></i>
                        </button>
                    </div>
                    <div class="btn-group btn-group-toggle dark-buttons" data-toggle="buttons">
                        <label for="continuous-play" id="btn-playback" class="btn btn-link {{ player.isContinuousPlay ? 'active':'' }}" title="Continuous playback" hidden>
                            <input type="checkbox" id="continuous-play" name="continuous_play" autocomplete="off" {{ player.isContinuousPlay ? 'checked':'' }}>
                            <i class="fas fa-redo-alt"></i>
                        </label>
                        <label for="filter" class="btn btn-link" title="Filter">
                            <input type="checkbox" id="filter" name="filter">
                            <i class="fas fa-filter"></i>
                        </label>
                        <label class="btn btn-link" title="AI Models" id="btn-ai-models">
                            <i class="fas fa-robot"></i>
                        </label>
                    </div>
                </form>
            </div>
        </div>
    </div>
    {% if isUserLogged %}
        <div class="col-3 z-1000">
            <div>
                <label class="col-form-label">
                    <strong>My Label:</strong>
                </label>
            </div>
            <div class="mb-2">
                <form id="reclabelform" novalidate>
                    <input type="hidden" name="recording_id" value="{{ player.recording.recording_id }}"/>
                    <input type="hidden" name="user_id" value="{{ user_id }}"/>
                    <select id="reclabel" name="label_id" required>
                        {% for lbl in labels %}
                            <option value="{{ lbl.id }}" {{ lbl.id == myLabel.id ? 'selected' }}>{{ lbl.name }}</option>
                        {% endfor %}
                    </select>
                    <a href="{{ baseUrl }}/recording/addLabel" class="js-open-modal" title="add custom label">
                        <i class="fas fa-plus pr-1"></i>
                    </a>
                </form>
            </div>
            <div>
                <a href="#" class="js-open-maad-modal">
                    <i class="svg-sum mt-3"></i>
                    <strong>Acoustic indices</strong>
                </a>
            </div>
            <div>
                <a href="#" class="js-open-tf-modal">
                    <i class="svg-model mt-3"></i>
                    <strong>AI models</strong>
                </a>
            </div>
            <div>
                <a href="#" class="js-open-aa-modal">
                    <i class="png-ruler mt-3"></i>
                    <strong>Acoustic analysis</strong>
                </a>
            </div>
        </div>
        <div class="modal fade" id="modal-maad" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title maad-title">Acoustic Index Analysis</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body ml-3">
                        <div>
                            <div class="form-group">
                                <select id="maad" name="maad_id" autocomplete="off" class="form-control form-control-sm col-6 mb-3" required>
                                    {% for index in indexs %}
                                        <option value="{{ index.indexId }}">{{ index.name }}</option>
                                    {% endfor %}
                                </select>
                                <div class="col-form-label">
                                    <strong>Description:</strong>
                                    <a class="col-form-label" href="{{ indexs[0].URL }}" target="_blank" title="Documentation"> <i class="fa fa-book"></i></a>
                                    <div class="col-form-label-sm">{{ indexs[0].description }}</div>
                                </div>
                                {% if indexs[0].param is not null and indexs[0].param != '' %}
                                    {% for p in indexs[0].param|split('!') %}
                                        <div class="form-inline">
                                            <label class="ml-1 col-form-label-sm" for="{{ p|split('|')[0] }}">{{ p|split('|')[0] }}</label>
                                        </div>
                                        <div class="form-group form-inline">
                                            <input id="{{ p|split('|')[0] }}" name="{{ p|split('|')[0] }}" class="form-control form-control-sm param" type="text">
                                            <label class="ml-2 col-form-label-sm">default: {{ p|split('|')[1] }}</label>
                                        </div>
                                    {% endfor %}
                                {% endif %}
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button id="js-close-button" type="button" class="btn btn-outline-secondary" data-dismiss="modal" aria-label="Close">
                            <i class="fas fa-times"></i>
                            Close
                        </button>
                        <a href="{{ baseUrl }}/recording/maad" class="js-maad-modal btn btn-outline-primary">
                            <i class="fa-solid fa-check"></i>
                            Compute
                        </a>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="modal-tf" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title maad-title">Classifiers</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body ml-3">
                        <div>
                            <div class="form-group">
                                <select id="tf" name="tf_id" autocomplete="off" class="form-control form-control-sm col-6 mb-3" required>
                                    {% for model in models %}
                                        <option value="{{ model.tf_model_id }}">{{ model.name }}</option>
                                    {% endfor %}
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button id="js-close-button" type="button" class="btn btn-outline-secondary" data-dismiss="modal" aria-label="Close">
                            <i class="fas fa-times"></i>
                            Close
                        </button>
                        <a id='model-btn' class="js-tf-modal btn btn-outline-primary">
                            <i class="fa-solid fa-check"></i>
                            Submit
                        </a>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="modal-aa" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title maad-title">Acoustic Analysis</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body ml-3">
                        <div>
                            <div class="form-group">
                                <select id="acoustic_analysis" name="acoustic_analysis_id" autocomplete="off" class="form-control form-control-sm col-6 mb-3" required>
                                    <option value="1">template_matching</option>
                                    <option value="2">Frequency of maximum energy</option>
                                </select>
                                <div id="template-matching">
                                    <div class="col-form-label">
                                        <strong>Description:</strong>
                                        <a class="col-form-label" href="https://scikit-maad.github.io/generated/maad.rois.template_matching.html" target="_blank" title="Documentation"> <i class="fa fa-book"></i></a>
                                        <div class="col-form-label-sm">Use normalized spectrogram cross-correlation to detect the occurrence of a template sound in a target audio.</div>
                                    </div>
                                    <div class="form-inline">
                                        <label class="ml-1 col-form-label-sm" for="peak_th">peak_th</label>
                                    </div>
                                    <div class="form-group form-inline">
                                        <input id="peak_th" name="peak_th" class="form-control form-control-sm param-tm" type="text">
                                        <label class="ml-2 col-form-label-sm">default: 0.5</label>
                                    </div>
                                    <div class="form-inline">
                                        <label class="ml-1 col-form-label-sm" for="peak_distance">peak_distance</label>
                                    </div>
                                    <div class="form-group form-inline">
                                        <input id="peak_distance" name="peak_distance" class="form-control form-control-sm param-tm" type="text">
                                        <label class="ml-2 col-form-label-sm">default: None</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <div class="modal-footer">
                            <button id="js-close-button" type="button" class="btn btn-outline-secondary" data-dismiss="modal" aria-label="Close">
                                <i class="fas fa-times"></i>
                                Close
                            </button>
                            <a href="{{ baseUrl }}/recording/maad" class="js-aa-modal btn btn-outline-primary">
                                <i class="fa-solid fa-check"></i>
                                Compute
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Hugging Face model execution modal -->
        <div class="modal fade" id="modal-hf-exec" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Run model on recording</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <input type="hidden" id="hf_exec_modelId" />
                        <div class="form-group">
                            <label>Model</label>
                            <div id="hf_exec_modelTitle" class="font-weight-bold"></div>
                        </div>
                        <div class="form-group">
                            <label>Pipeline</label>
                            <div id="hf_exec_pipeline" class="small text-muted"></div>
                        </div>
                        <div class="form-group">
                            <label for="hf_exec_param_note">Notes / model config</label>
                            <pre id="hf_exec_modelConfig" style="max-height:200px;overflow:auto;background:#f8f9fa;padding:8px;border-radius:4px"></pre>
                        </div>
                        <div class="form-group">
                            <label for="hf_exec_custom_params">Custom parameters (JSON)</label>
                            <textarea id="hf_exec_custom_params" class="form-control" rows="3">{"confidence":0.5}</textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button id="hf_exec_run" type="button" class="btn btn-primary">Execute model</button>
                    </div>
                </div>
            </div>
        </div>
        <script>
            $(".loading").css("opacity", "0");
            $(document).ready(function () {
                $('#tf').change(function () {
                    let html = ''
                    $(this).siblings().remove();
                    {% for model in models %}
                    if ($(this).val() == '{{ model.tf_model_id }}') {
                        $('#model-btn').attr("href", "{{ baseUrl }}/recording/{{ model.name|replace({'-': ''}) }}");
                        html = html + '<div class="col-form-label">' +
                            '<strong>Description:</strong>' +
                            '<a class="col-form-label" href="{{ model.source_URL }}" target="_blank" title="Documentation"> <i class="fa fa-book"></i></a>' +
                            '<div class="col-form-label-sm">{{ model.description }}</div></div>'
                        let data = '{{ model.parameter }}'.split('$').map(item => item.split('@'));
                        $.each(data, function (index, value) {
                            html = html + '<div class="form-inline">' +
                                '<label class="ml-1 col-form-label-sm" for="' + value[0] + '">' + value[0] + '</label></div>' +
                                '<div class="form-group form-inline">' +
                                '<input id="' + value[0] + '" name="' + value[0] + '" class="form-control form-control-sm" type="text">' +
                                '<label class="ml-2 col-form-label-sm">' + value[1] + '</label></div>'
                        })
                        $(this).after(html)
                    }
                    {% endfor %}
                })
                $("#tf").change();
                $('#acoustic_analysis').change(function () {
                    if ($(this).val() == '1') {
                        $('#template-matching').show()
                    } else {
                        $('#template-matching').hide()
                    }
                })
                $("#acoustic_analysis").change();
            });

            $("#maad").change(function () {
                $.ajax({
                    url: "{{ baseUrl }}/recording/getMaadlabel/" + $("#maad").val(),
                    success: function (data) {
                        $("#maad").nextAll().remove()
                        if (data) {
                            $("#maad").after(data)
                        }
                    },
                })
            })
            $('.js-open-maad-modal').click(function () {
                $('#modal-maad').modal('show');
            })
            $('.js-open-tf-modal').click(function () {
                $('#modal-tf').modal('show');
            })
            $('.js-open-aa-modal').click(function () {
                $('#modal-aa').modal('show');
            })

            // Function to display segmentation results overlaid on spectrogram
            function displaySegmentationResults(result) {
                if (!result.result || !Array.isArray(result.result)) {
                    alert('No segmentation results returned');
                    return;
                }

                const segments = result.result;
                if (segments.length === 0) {
                    alert('Model ran successfully but detected no segments in the spectrogram.\n\nModel: ' + result.modelId);
                    return;
                }

                // Get canvas and context
                const canvas = document.getElementById('myCanvas');
                if (!canvas) {
                    alert('Canvas not found');
                    return;
                }

                // Create a temporary canvas for compositing
                const overlayCanvas = document.createElement('canvas');
                overlayCanvas.width = canvas.offsetWidth;
                overlayCanvas.height = canvas.offsetHeight;
                const ctx = overlayCanvas.getContext('2d');

                // Generate distinct colors for each segment
                const colors = [
                    'rgba(255, 0, 0, 0.4)',    // Red
                    'rgba(0, 255, 0, 0.4)',    // Green
                    'rgba(0, 0, 255, 0.4)',    // Blue
                    'rgba(255, 255, 0, 0.4)',  // Yellow
                    'rgba(255, 0, 255, 0.4)',  // Magenta
                    'rgba(0, 255, 255, 0.4)',  // Cyan
                    'rgba(255, 128, 0, 0.4)',  // Orange
                    'rgba(128, 0, 255, 0.4)',  // Purple
                ];

                let processedCount = 0;
                const totalSegments = segments.length;

                // Process each segment
                segments.forEach((segment, index) => {
                    if (!segment.mask) {
                        processedCount++;
                        return;
                    }

                    // Decode base64 mask
                    const maskImage = new Image();
                    maskImage.onload = function() {
                        // Draw mask with color overlay
                        ctx.globalCompositeOperation = 'source-over';
                        ctx.fillStyle = colors[index % colors.length];
                        
                        // Create a temporary canvas for the mask
                        const maskCanvas = document.createElement('canvas');
                        maskCanvas.width = maskImage.width;
                        maskCanvas.height = maskImage.height;
                        const maskCtx = maskCanvas.getContext('2d');
                        maskCtx.drawImage(maskImage, 0, 0);
                        
                        // Get mask pixels
                        const maskData = maskCtx.getImageData(0, 0, maskImage.width, maskImage.height);
                        const pixels = maskData.data;
                        
                        // Scale mask to canvas size and draw colored overlay
                        const scaleX = overlayCanvas.width / maskImage.width;
                        const scaleY = overlayCanvas.height / maskImage.height;
                        
                        for (let y = 0; y < maskImage.height; y++) {
                            for (let x = 0; x < maskImage.width; x++) {
                                const i = (y * maskImage.width + x) * 4;
                                // Check if pixel is part of mask (non-transparent)
                                if (pixels[i + 3] > 128) { // Alpha channel
                                    const canvasX = Math.floor(x * scaleX);
                                    const canvasY = Math.floor(y * scaleY);
                                    ctx.fillRect(canvasX, canvasY, Math.ceil(scaleX), Math.ceil(scaleY));
                                }
                            }
                        }
                        
                        // Draw label
                        const label = segment.label || 'Unknown';
                        const score = segment.score ? (segment.score * 100).toFixed(1) + '%' : '';
                        ctx.fillStyle = colors[index % colors.length].replace('0.4', '1.0');
                        ctx.font = 'bold 14px Arial';
                        ctx.strokeStyle = 'white';
                        ctx.lineWidth = 3;
                        const text = label + (score ? ' (' + score + ')' : '');
                        const textY = 20 + (index * 25);
                        ctx.strokeText(text, 10, textY);
                        ctx.fillText(text, 10, textY);
                        
                        processedCount++;
                        
                        // When all segments processed, add overlay to canvas
                        if (processedCount === totalSegments) {
                            // Add overlay as a new div on top of canvas
                            const existingOverlay = document.getElementById('segmentation-overlay');
                            if (existingOverlay) {
                                existingOverlay.remove();
                            }
                            
                            const overlayDiv = document.createElement('div');
                            overlayDiv.id = 'segmentation-overlay';
                            overlayDiv.style.position = 'absolute';
                            overlayDiv.style.top = '0';
                            overlayDiv.style.left = '0';
                            overlayDiv.style.width = '100%';
                            overlayDiv.style.height = '100%';
                            overlayDiv.style.pointerEvents = 'none';
                            overlayDiv.style.zIndex = '10';
                            
                            const overlayImg = document.createElement('img');
                            overlayImg.src = overlayCanvas.toDataURL();
                            overlayImg.style.width = '100%';
                            overlayImg.style.height = '100%';
                            overlayDiv.appendChild(overlayImg);
                            
                            canvas.appendChild(overlayDiv);
                            
                            // Show summary alert
                            alert('Segmentation overlay applied!\n\n' +
                                  'Model: ' + result.modelId + '\n' +
                                  'Segments found: ' + totalSegments + '\n\n' +
                                  segments.map((s, i) => (i+1) + '. ' + s.label + ' (' + (s.score * 100).toFixed(1) + '%)').join('\n') +
                                  '\n\nClick "Clear Overlay" button to remove.');
                            
                            // Add clear button if it doesn't exist
                            if (!document.getElementById('clear-segmentation-overlay')) {
                                const clearBtn = document.createElement('button');
                                clearBtn.id = 'clear-segmentation-overlay';
                                clearBtn.className = 'btn btn-sm btn-warning mt-2';
                                clearBtn.textContent = 'Clear Overlay';
                                clearBtn.onclick = function() {
                                    const overlay = document.getElementById('segmentation-overlay');
                                    if (overlay) overlay.remove();
                                    clearBtn.remove();
                                };
                                document.getElementById('player_box').appendChild(clearBtn);
                            }
                        }
                    };
                    
                    maskImage.onerror = function() {
                        console.error('Failed to load mask for segment:', segment.label);
                        processedCount++;
                    };
                    
                    // Load base64 image
                    maskImage.src = 'data:image/png;base64,' + segment.mask;
                });
            }

            // Open Hugging Face modal via AI Models button
            $('#btn-ai-models').on('click', function () {
                if (typeof openHuggingFaceModal === 'function') {
                    openHuggingFaceModal('');  // Empty string = show all image-segmentation models
                }
            });

            // Handle selected model from Hugging Face modal
            window.addEventListener('huggingface:model:selected', function (e) {
                const model = e.detail || {};
                console.log('HF model selected in player:', model);
                // Open the HF execution modal and populate fields so user can set execution params
                $('#hf_exec_modelId').val(model.modelId || model.id || '');
                $('#hf_exec_modelTitle').text(model.modelId || model.id || '');
                $('#hf_exec_pipeline').text(model.pipeline_tag || (model.tags || []).join(', '));
                // Store pipeline_tag for later use
                $('#hf_exec_modelId').data('pipeline-tag', model.pipeline_tag || '');
                try {
                    const cfg = model.config ? JSON.stringify(model.config, null, 2) : (model.cardData && model.cardData.modelDetails ? JSON.stringify(model.cardData.modelDetails, null, 2) : '');
                    $('#hf_exec_modelConfig').text(cfg);
                } catch (err) {
                    $('#hf_exec_modelConfig').text('');
                }
                // prefill small default params
                $('#hf_exec_custom_params').val(JSON.stringify({confidence:0.5}));
                $('#modal-hf-exec').modal('show');
            });

            // Execute model button — run inference locally on server via AJAX
            $('#hf_exec_run').on('click', function () {
                const modelId = $('#hf_exec_modelId').val();
                const pipelineTag = $('#hf_exec_modelId').data('pipeline-tag') || '';
                let params = {};
                try {
                    params = JSON.parse($('#hf_exec_custom_params').val());
                } catch (err) {
                    alert('Custom parameters must be valid JSON');
                    return;
                }

                // Get current spectrogram URL for image-segmentation models
                let spectrogramUrl = '';
                if (pipelineTag === 'image-segmentation') {
                    // Get the spectrogram image src from the player
                    const spectrogramImg = $('#cropbox');
                    if (spectrogramImg.length > 0) {
                        spectrogramUrl = spectrogramImg.attr('src');
                    }
                    if (!spectrogramUrl) {
                        alert('Spectrogram URL not found. Please ensure the spectrogram is loaded.');
                        return;
                    }
                }

                // Hide modal and show loading
                $('#modal-hf-exec').modal('hide');
                $('.loading-grey').toggle();

                // Call backend to execute model locally on this recording
                const apiBase = (typeof baseUrl !== 'undefined' && baseUrl) ? baseUrl : '';
                const requestBody = {
                    modelId: modelId,
                    recordingId: $('input[name=recording_id]').val(),
                    params: params
                };
                
                // Add pipelineTag and spectrogramUrl for image-segmentation models
                if (pipelineTag) {
                    requestBody.pipelineTag = pipelineTag;
                }
                if (spectrogramUrl) {
                    requestBody.spectrogramUrl = spectrogramUrl;
                }
                
                fetch(apiBase + '/api/huggingface/execute', {
                    method: 'POST',
                    credentials: 'same-origin',
                    headers: { 
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(requestBody)
                })
                .then(r => {
                    if (!r.ok) return r.text().then(t => { throw new Error(t || r.status); });
                    return r.json();
                })
                .then(result => {
                    $('.loading-grey').toggle();
                    if (result.error) {
                        let errorMsg = 'Inference error: ' + (result.message || 'Unknown error');
                        if (result.raw_response) {
                            errorMsg += '\n\nRaw API response:\n' + result.raw_response;
                        }
                        if (result.debug_file_size_kb) {
                            errorMsg += '\n\nFile size: ' + result.debug_file_size_kb + ' KB';
                        }
                        if (result.raw_output) {
                            errorMsg += '\n\nRaw output:\n' + result.raw_output;
                        }
                        if (result.json_error) {
                            errorMsg += '\n\nJSON error: ' + result.json_error;
                        }
                        alert(errorMsg);
                    } else {
                        // Display segmentation results
                        displaySegmentationResults(result);
                    }
                })
                .catch(err => {
                    $('.loading-grey').toggle();
                    let errorMsg = 'Inference failed: ' + (err.message || err.toString() || 'Unknown error');
                    console.error('Inference error:', err);
                    alert(errorMsg);
                });
            });

            $(".js-maad-modal").click(function (e) {
                let data = []
                let param = ''
                $('.param').each(function () {
                    if ($(this).val() != '') {
                        param = param + $(this).attr('id') + '?' + $(this).val() + '@'
                    }
                })
                data = {
                    'min_time': $('input[name=minTimeView]').val(),
                    'max_time': $('input[name=maxTimeView]').val(),
                    'min_frequency': $('input[name=minFreqView]').val(),
                    'max_frequency': $('input[name=maxFreqView]').val(),
                    'collection_id': $('input[name=collection_id]').val(),
                    'recording_id': $('input[name=recording_id]').val(),
                    'filename': soundFilePath,
                    'index_id': $('#maad').val(),
                    'index': $('#maad').find("option:selected").text(),
                    'channel_num': $('input[name=channel_num]').val(),
                    'channel': $('input[name=channel]').val(),
                    'param': param,
                };
                $('#modal-maad').modal('hide');
                requestModal(this.href, data, true);
                e.preventDefault();
            });
            $(".js-tf-modal").click(function (e) {
                let data = []
                if ($('#tf').val() == 1) {
                    if ($('#lat').val() == "" || $('#lon').val() == "" || $('#file_date').val() == "") {
                        if (!confirm("Your recordings have not been assigned to geographic locations and date-times. BirdNET will produce unreliable results!")) {
                            e.preventDefault();
                            return
                        }
                    }
                }
                $('.loading-grey').toggle();
                if ($('#tf').val() == 1) {
                    data = {
                        'collection_id': $('input[name=collection_id]').val(),
                        'recording_id': $('input[name=recording_id]').val(),
                        'filename': $('input[name=filename]').val(),
                        'creator_type': $("#tf option:selected").text(),
                        'recording_directory': $('input[name=recording_directory]').val(),
                        'lat': $("#lat").val(),
                        'lon': $("#lon").val(),
                        'file_date': $("#file_date").val(),
                        'sensitivity': $("#sensitivity").val(),
                        'min_conf': $("#min_conf").val(),
                        'overlap': $("#overlap").val(),
                        'sf_thresh': $("#sf_thresh").val(),
                        'temp': soundFilePath,
                        'max_freq': fileFreqMax,
                        'user_id': '{{ user_id }}',
                    };
                } else if ($('#tf').val() == 2) {
                    data = {
                        'collection_id': $('input[name=collection_id]').val(),
                        'recording_id': $('input[name=recording_id]').val(),
                        'filename': $('input[name=filename]').val(),
                        'creator_type': $("#tf option:selected").text(),
                        'recording_directory': $('input[name=recording_directory]').val(),
                        'file_date': $("#file_date").val(),
                        'detection_threshold': $("#detection_threshold").val(),
                        'temp': soundFilePath,
                        'user_id': '{{ user_id }}',
                    };
                }
                $('#modal-tf').modal('hide');
                data = jsToFormData(data)
                $.ajax({
                    type: 'POST',
                    url: this.href,
                    data: data,
                    dataType: 'json',
                    processData: false,
                    contentType: false,
                })
                    .done(function (result) {
                        alert(result.message)
                        if (result.message.indexOf('found 0 detections.') === -1) {
                            location.reload()
                        }
                        $('.loading-grey').toggle();
                    })
                    .fail(function (response) {
                        $('.loading-grey').toggle();
                        if (!response.responseJSON) {
                            showAlert('Error ' + response.message);
                            return;
                        }
                        showAlert(response.responseJSON.message);
                    })
                e.preventDefault();
            });
            $(".js-aa-modal").click(function (e) {
                let data = []
                let param = ''
                $('.loading-grey').toggle();
                $('#modal-aa').modal('hide');
                if ($('#acoustic_analysis').val() == 1) {
                    if (minTime == 0 && maxTime == fileDuration.toFixed(1)) {
                        showAlert('Please zoom in before executing.')
                        e.preventDefault();
                        $('.loading-grey').toggle();
                        return
                    }
                    $('.param-tm').each(function () {
                        if ($(this).val() != '') {
                            param = param + $(this).attr('id') + '?' + $(this).val() + '@'
                        }
                    })
                    data = {
                        'min_time': $('input[name=minTimeView]').val(),
                        'max_time': $('input[name=maxTimeView]').val(),
                        'min_frequency': $('input[name=minFreqView]').val(),
                        'max_frequency': $('input[name=maxFreqView]').val(),
                        'collection_id': $('input[name=collection_id]').val(),
                        'recording_id': $('input[name=recording_id]').val(),
                        'filename': soundFilePath,
                        'index_id': $('#acoustic_analysis').val(),
                        'index': $('#acoustic_analysis').find("option:selected").text(),
                        'channel_num': $('input[name=channel_num]').val(),
                        'channel': $('input[name=channel]').val(),
                        'param': param,
                    };
                    data = jsToFormData(data)
                    $.ajax({
                        type: 'POST',
                        url: this.href,
                        data: data,
                        dataType: 'json',
                        processData: false,
                        contentType: false,
                    })
                        .done(function (result) {
                            if (result.message) {
                                alert(result.message)
                                if (result.message.startsWith('Scikit-maad template_matching')) {
                                    location.assign(location.pathname);
                                }
                            } else {
                                $('#modalWindows').html(result.data);
                                $("#modal-div").modal('show');
                            }
                            $('.loading-grey').toggle();
                        })
                        .fail(function (response) {
                            $('.loading-grey').toggle();
                            if (!response.responseJSON) {
                                showAlert('Error ' + response.message);
                                return;
                            }
                            showAlert(response.responseJSON.message);
                        })
                    e.preventDefault();
                } else if ($('#acoustic_analysis').val() == 2) {
                    data = {
                        'minTime': $('input[name=minTimeView]').val(),
                        'maxTime': $('input[name=maxTimeView]').val(),
                        'minFrequency': $('input[name=minFreqView]').val(),
                        'maxFrequency': $('input[name=maxFreqView]').val(),
                        'collection_id': $('input[name=collection_id]').val(),
                        'recording_id': $('input[name=recording_id]').val(),
                        'filename': soundFilePath,
                        'recording_directory': $('input[name=recording_directory]').val(),
                        'index': '',
                        'channel_num': $('input[name=channel_num]').val(),
                        'channel': $('input[name=channel]').val(),
                    };
                    data = jsToFormData(data)
                    $.ajax({
                        type: 'POST',
                        url: this.href,
                        data: data,
                        dataType: 'json',
                        processData: false,
                        contentType: false,
                    })
                        .done(function (result) {
                            let message = 'Frequency of maximum energy: ' + result + ' Hz (copied to clipboard)'

                            const input = document.createElement('input');
                            document.body.appendChild(input);
                            input.value = result
                            input.focus();
                            input.select();

                            const isSuccessful = document.execCommand('copy');

                            if (!isSuccessful) {
                                message = 'Frequency of maximum energy: ' + result + ' Hz (Data copy to clipboard failed)';
                            }

                            input.remove();
                            $('.loading-grey').toggle();
                            showAlert(message);
                        })
                    e.preventDefault();
                }
            });
        </script>
    {% endif %}
    {% if open!=0 %}
        <script>
            $('#modal-div').prop('data-backdrop', false)
            $().ready(function () {
                $("#tag_{{ open }}").click()
                $('#open').val(0)
                $('.loading-grey').toggle();
            })
        </script>
    {% endif %}
    {# {% include 'recording/player/frequencyScale.html.twig' %} #}
</div>
