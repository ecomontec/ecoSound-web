<script src="{{ baseUrl }}/assets/js/moment.js"></script>
<script src="{{ baseUrl }}/assets/js/vis-data.min.js"></script>
<script src="{{ baseUrl }}/assets/js/vis-timeline-graph2d.min.js"></script>
<link rel="stylesheet" href="{{ baseUrl }}/assets/css/vis-timeline-graph2d.min.css">
<div id="visualization"></div>
<style>
    {% set css = [] %}
    {% for item in list %}
    {% if item.recording.dutyCycleRecording and item.recording.dutyCyclePeriod %}
    {% set key = item.recording.dutyCycleRecording ~ '-' ~ item.recording.dutyCyclePeriod %}
    {% if key not in css %}
    .duty-cycle-{{ item.recording.dutyCycleRecording }}-{{ item.recording.dutyCyclePeriod }} {
        background: repeating-linear-gradient(
        90deg,
        #d5ddf6,
        #d5ddf6 {{ (item.recording.dutyCycleRecording/item.recording.dutyCyclePeriod)*100/10 }}%,
        #ffffff {{ (item.recording.dutyCycleRecording/item.recording.dutyCyclePeriod)*100/10 }}%,
        #ffffff 10%
        );
    }

    .duty-cycle-{{ item.recording.dutyCycleRecording }}-{{ item.recording.dutyCyclePeriod }}.vis-selected {
        background: repeating-linear-gradient(
        90deg,
        #fff785,
        #fff785 {{ (item.recording.dutyCycleRecording/item.recording.dutyCyclePeriod)*100/10 }}%,
        #ffffff {{ (item.recording.dutyCycleRecording/item.recording.dutyCyclePeriod)*100/10 }}%,
        #ffffff 10%
        );
    }

    {% set css = css|merge([item.recording.dutyCycleRecording,]) %}
    {% endif %}
    {% endif %}
    {% endfor %}
</style>
<script>
    var tl_container = document.getElementById("visualization");
    var tl_groups = []
    var tl_arr = []
    var tl_items = new vis.DataSet([
        {% for item in list %}
        {
            id: {{ item.recording.id }},
            {% if item.recording.data_type=='meta-data' %}
            {% if item.recording.dutyCycleRecording and item.recording.dutyCyclePeriod %}
            content: "meta-recording (no audio) sampling rate: {{ item.recording.samplingRate }}, duty cycle: {{ item.recording.dutyCycleRecording }}/{{ item.recording.dutyCyclePeriod }}",
            {% else %}
            content: "meta-recording (no audio) sampling rate: {{ item.recording.samplingRate }}",
            {% endif %}
            {% else %}
            content: "<a href='{{ baseUrl }}/recording/show/{{ item.recording.id }}' target='_blank'>{{ item.recording.name }}</a>",
            {% endif %}
            start: "{{ item.recording.startDate }}",
            end: "{{ item.recording.endDate }}",
            group: {{ item.recording.site?item.recording.site:0 }},
            order: "{{ item.recording.name }}",
            {% if item.recording.dutyCycleRecording and item.recording.dutyCyclePeriod %}
            className: "duty-cycle-{{ item.recording.dutyCycleRecording }}-{{ item.recording.dutyCyclePeriod }}",
            {% endif %}
        },
        {% endfor %}
    ]);
    {% for item in list %}
    if ($.inArray({{ item.recording.site?item.recording.site:0 }}, tl_arr) == -1) {
        tl_arr.push({{ item.recording.site?item.recording.site:0 }})
        tl_groups.push({
            id: {{ item.recording.site?item.recording.site:0 }},
            content: "{{ item.recording.siteName?item.recording.siteName:'not geo-referenced' }}",
        })
    }
    {% endfor %}

    var tl_options = {
        maxHeight: 1000,
        min: "{{ min }}",
        max: "{{ max }}",
        cluster: {
            maxItems: 1,
        },
        order: function (a, b) {
            if (b.start - a.start == 0) {
                return b.order.localeCompare(a.order)
            }
            return b.start - a.start
        },
    };
    var timeline = new vis.Timeline(tl_container, tl_items, tl_groups, tl_options);
    $(document).ready(function () {
        $('.vis-item').on('mouseover', function () {
            $(this).find('.vis-item-overflow').css('overflow', 'visible')
        });
        $('.vis-item').on('mouseout', function () {
            if (!$(this).hasClass('vis-selected')) {
                $(this).find('.vis-item-overflow').css('overflow', 'hidden')
            }
        });
        timeline.on('select', function () {
            $('.vis-item').each(function () {
                if ($(this).hasClass('vis-selected')) {
                    $(this).find('.vis-item-overflow').css('overflow', 'visible')
                } else {
                    $(this).find('.vis-item-overflow').css('overflow', 'hidden')
                }
            });
        });

        var prevRange = timeline.getWindow();
        var click_item
        $('#visualization').on('click', '.vis-cluster', function () {
            console.log($(this).width() / $('.vis-itemset').width())
            if ($(this).width() / $('.vis-itemset').width() < 0.96 && $(this).width() / $('.vis-itemset').width() > 0.95) {
                timeline.setOptions({cluster: false});
                click_item = $(this)
            }
        })
        timeline.on('rangechanged', function () {
            var currentRange = timeline.getWindow();
            if (typeof click_item !== 'undefined' && click_item.width() / $('.vis-itemset').width() < 0.96) {
                if (currentRange.end - currentRange.start > prevRange.end - prevRange.start) {
                    timeline.setOptions({cluster: true});
                }
            }
            prevRange = currentRange;
        });

    });
</script>




